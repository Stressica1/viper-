# Logstash Configuration for VIPER Trading Bot
# Processes logs from Redis and indexes them in Elasticsearch

input {
  redis {
    host => "redis"
    port => 6379
    data_type => "list"
    key => "logstash:logs"
    threads => 4
  }
}

filter {
  # Parse JSON logs
  json {
    source => "message"
    target => "parsed_log"
  }

  # Extract fields from parsed JSON
  if [parsed_log] {
    mutate {
      add_field => {
        "timestamp" => "%{[parsed_log][timestamp]}"
        "service" => "%{[parsed_log][service]}"
        "level" => "%{[parsed_log][level]}"
        "log_message" => "%{[parsed_log][message]}"
        "correlation_id" => "%{[parsed_log][correlation_id]}"
        "trace_id" => "%{[parsed_log][trace_id]}"
        "log_data" => "%{[parsed_log][data]}"
      }
    }
  }

  # Convert timestamp to proper format
  date {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
  }

  # Add log level mapping
  mutate {
    lowercase => ["level"]
  }

  # Extract additional metadata
  if [log_data] and [log_data][type] {
    mutate {
      add_field => {
        "log_type" => "%{[log_data][type]}"
      }
    }
  }

  # Performance metrics extraction
  if [log_type] and [log_type] == "performance" {
    mutate {
      add_field => {
        "operation" => "%{[log_data][operation]}"
        "duration_ms" => "%{[log_data][duration]}"
        "memory_delta_mb" => "%{[log_data][memory_delta]}"
      }
    }
  }

  # Trade logging
  if [log_type] and [log_type] == "trade" {
    mutate {
      add_field => {
        "symbol" => "%{[log_data][symbol]}"
        "side" => "%{[log_data][side]}"
        "amount" => "%{[log_data][amount]}"
        "price" => "%{[log_data][price]}"
        "order_type" => "%{[log_data][order_type]}"
      }
    }
  }

  # HTTP request logging
  if [log_type] and [log_type] == "http_request" {
    mutate {
      add_field => {
        "method" => "%{[log_data][method]}"
        "endpoint" => "%{[log_data][endpoint]}"
        "status_code" => "%{[log_data][status_code]}"
        "response_time" => "%{[log_data][duration]}"
      }
    }
  }

  # Error tracking
  if [level] == "error" or [level] == "critical" {
    mutate {
      add_field => {
        "error_type" => "%{[log_data][error_type]}"
        "error_context" => "%{[log_data][context]}"
        "has_traceback" => "%{[log_data][traceback]}"
      }
    }
  }

  # Add geoip for IP addresses if present
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }

  # Add user agent parsing if present
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "user_agent_parsed"
    }
  }

  # Clean up temporary fields
  mutate {
    remove_field => ["parsed_log", "message", "@version", "host"]
  }
}

output {
  # Main Elasticsearch output
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "viper-logs-%{+YYYY.MM.dd}"
    document_type => "_doc"

    # Custom template for better mapping
    template_name => "viper-logs"
    template => "/usr/share/logstash/config/viper-logs-template.json"
    template_overwrite => true
  }

  # Console output for debugging (development only)
  if [level] == "debug" {
    stdout {
      codec => rubydebug
    }
  }

  # File output as backup
  file {
    path => "/usr/share/logstash/logs/viper-logs-%{+YYYY-MM-dd}.log"
    codec => json_lines
  }

  # Error logs to separate index
  if [level] == "error" or [level] == "critical" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "viper-errors-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # Performance metrics to separate index
  if [log_type] and [log_type] == "performance" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "viper-performance-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # Trade logs to separate index for analysis
  if [log_type] and [log_type] == "trade" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "viper-trades-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
}
